Silly = Record {
    A : Type;
    x : A;
    y : A;
};

my-silly : Silly;
my-silly = record {
    A = Record {};
    x = record {};
    y = record {};
};


-- empty record introductions should not need an annotation
test-synth-empty-record-intro = record {};
test-synth-empty-record-intro-ty : Record {} = test-synth-empty-record-intro;


||| Module for defining equality between two terms
Eq : Type -> Type;
Eq A = Record {
    ||| Compare two terms for equality
    eq : A -> A -> Bool;
};

||| Compare two terms for equality
eq : Fun {A : Type} (eq-A : Eq A) -> A -> A -> Bool;
eq eq-A a1 a2 = eq-A.eq a1 a2;


Map = Record {
    Key : Type;
    Map : Type -> Type;

    empty : Fun {A : Type} -> Map A;
    add : Fun {A : Type} -> A -> Map A -> Map A;
    lookup : Fun {A : Type} -> Key -> A -> Map A -> A; -- TODO: return `Option A`
};


Shape = Record {
    T : Type;
    area : T -> F32;
    value : T;
};
